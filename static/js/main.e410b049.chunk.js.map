{"version":3,"sources":["logo.svg","../../src/index.js","Example.js","index.js","App.js","Example.module.css"],"names":["module","exports","hasMore","reset","distance","scrollContainerRef","useRef","loaderRef","useState","page","setPage","useLayoutEffect","loaderNode","scrollContainerNode","options","root","rootMargin","previousRatio","observer","IntersectionObserver","entries","isIntersecting","intersectionRatio","boundingClientRect","y","previousY","Example","items","setItems","setHasMore","useInfiniteScroll","scrollerRef","useEffect","a","realPage","fetch","resp","json","data","totalResults","prev","Search","ref","className","styles","scroller","map","item","key","imdbID","Year","Title","width","alt","src","Poster","ReactDOM","render","height","logo","document","getElementById"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,kC,goCC4B5B,SAA2B,GAIvC,IAHDC,EAGC,EAHDA,QAGC,IAFDC,aAEC,aADDC,gBACC,MADU,IACV,EACKC,EAAqBC,mBACrBC,EAAYD,mBAFjB,IAGuBE,mBAHvB,MAGMC,EAHN,KAGYC,EAHZ,KA6CD,OAxCIP,GAAJ,IAAaM,GACXC,KAGFC,2BAAgB,WACd,IAAMC,EAAaL,EAAnB,QACMM,EAAsBR,EAA5B,QACA,GAAKQ,GAAD,GAAJ,GAEA,IAKA,EALMC,EAAU,CACdC,KADc,EAEdC,WAAY,WAAF,oBAIRC,EAAJ,EAmBMC,EAAW,IAAIC,sBAjBJ,SAAAC,GACfA,WACE,YAAoE,IAAjEC,EAAiE,EAAjEA,eAAgBC,EAAiD,EAAjDA,kBAAiD,IAA9BC,mBAC5BC,QAD0D,MAAT,GAAS,KAGhEH,GACAC,GADAD,KAEEI,GAAaD,EAHjB,IAKEd,GAAQ,SAAAD,GAAI,OAAIA,EAAJ,KAEdgB,IACAR,SAKN,GAGA,OAFAC,aAEO,kBAAMA,EAAN,iBACN,CAAChB,EAlCJS,IAoCO,CAACF,EAAMF,EAAd,I,gBCrEa,SAASmB,IAAW,IAAD,EACNlB,mBAAS,IADH,mBACzBmB,EADyB,KAClBC,EADkB,OAEFpB,oBAAS,GAFP,mBAEzBN,EAFyB,KAEhB2B,EAFgB,OAGOC,EAAkB,CAAE5B,YAH3B,mBAGzBO,EAHyB,KAGnBF,EAHmB,KAGRwB,EAHQ,KAehC,OAVAC,qBAAU,WACR,sBAAC,gCAAAC,EAAA,6DACOC,EAAWzB,EAAO,EADzB,SAEoB0B,MAAM,GAAD,OAVlB,iDAUkB,iBAAgBD,IAFzC,cAEOE,EAFP,gBAGoBA,EAAKC,OAHzB,OAGOC,EAHP,OAICT,EAAsB,GAAXK,GAAiBI,EAAKC,cACjCX,GAAS,SAAAY,GAAI,4BAAQA,GAAR,YAAiBF,EAAKG,YALpC,0CAAD,KAOC,CAAChC,IAGF,yBAAKiC,IAAKX,EAAaY,UAAWC,IAAOC,UACtClB,EAAMmB,KAAI,SAAAC,GAAI,OACb,6BAASC,IAAKD,EAAKE,OAAQN,UAAWC,IAAOG,MAC3C,4BACGA,EAAKG,KADR,WACiBH,EAAKI,OAEtB,yBAAKC,MAAM,QAAQC,IAAKN,EAAKI,MAAOG,IAAKP,EAAKQ,aAGjDrD,GAAW,yBAAKwC,IAAKnC,GAAV,kB,qBC3BlBiD,IAASC,OAAO,mBCAD,WACb,OACE,iCACE,gCACE,4BACE,yBAAKC,OAAO,OAAOJ,IAAKK,IAAMN,IAAI,iBAGtC,kBAAC3B,EAAD,SDRU,MAASkC,SAASC,eAAe,U,kBELjD7D,EAAOC,QAAU,CAAC,SAAW,0BAA0B,KAAO,yB","file":"static/js/main.e410b049.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d0a24d1a.svg\";","import { useRef, useState, useLayoutEffect } from 'react';\n\n/**\n * An infinite scroller based on effects.\n * Every time the loader is `N`px to be shown, switch to a new page, load new items.\n *\n * @example\n * const [items, setItems] = useState([]);\n * const [hasMore, setHasMore] = useState(false);\n * const [page, loaderRef, scrollerRef] = useInfiniteScroll({ hasMore });\n *\n * useFetchEffect(async ({ signal }) => {\n *   const data = await myApiCall({ page }, { signal });\n *   setHasMore(data.hasMore);\n *   setItems(prev => [...prev, data.items]);\n * }, [page])\n *\n * return (\n *   <div ref={scrollerRef}>\n *     {items.map(item => <div key={item.id}>{item.name}</div>)}\n *     {hasMore && <div ref={loaderRef}>Loading…</div>}\n *   </div>\n * );\n * @param {Object} [options={}]\n * @param {boolean} options.hasMore The observer will disconnect when there are no more items to load.\n * @param {boolean} [options.reset=false] Pass true when you're re-fetching the list and want to resets the scroller to page 0.\n * @param {number} [options.distance=250] When scrolling, the distance in pixels from the bottom to switch the page.\n */\nexport default function useInfiniteScroll({\n  hasMore,\n  reset = false,\n  distance = 250,\n}) {\n  const scrollContainerRef = useRef();\n  const loaderRef = useRef();\n  const [page, setPage] = useState(0);\n\n  if (reset && page !== 0) {\n    setPage(0);\n  }\n\n  useLayoutEffect(() => {\n    const loaderNode = loaderRef.current;\n    const scrollContainerNode = scrollContainerRef.current;\n    if (!scrollContainerNode || !loaderNode || !hasMore) return;\n\n    const options = {\n      root: scrollContainerNode,\n      rootMargin: `0px 0px ${distance}px 0px`,\n    };\n\n    let previousY;\n    let previousRatio = 0;\n\n    const listener = entries => {\n      entries.forEach(\n        ({ isIntersecting, intersectionRatio, boundingClientRect = {} }) => {\n          const { y } = boundingClientRect;\n          if (\n            isIntersecting &&\n            intersectionRatio >= previousRatio &&\n            (!previousY || y < previousY)\n          ) {\n            setPage(page => page + 1);\n          }\n          previousY = y;\n          previousRatio = intersectionRatio;\n        },\n      );\n    };\n\n    const observer = new IntersectionObserver(listener, options);\n    observer.observe(loaderNode);\n\n    return () => observer.disconnect();\n  }, [hasMore, distance]);\n\n  return [page, loaderRef, scrollContainerRef];\n}\n","import React, { useState, useEffect } from 'react';\n\nimport useInfiniteScroll from '@closeio/use-infinite-scroll';\n\nimport styles from './Example.module.css';\n\nconst URL = '//www.omdbapi.com/?s=beautiful&apikey=fb2d739d';\n\nexport default function Example() {\n  const [items, setItems] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [page, loaderRef, scrollerRef] = useInfiniteScroll({ hasMore });\n\n  useEffect(() => {\n    (async () => {\n      const realPage = page + 1;\n      const resp = await fetch(`${URL}&page=${realPage}`);\n      const data = await resp.json();\n      setHasMore(realPage * 10 <= data.totalResults);\n      setItems(prev => [...prev, ...data.Search]);\n    })();\n  }, [page]);\n\n  return (\n    <div ref={scrollerRef} className={styles.scroller}>\n      {items.map(item => (\n        <section key={item.imdbID} className={styles.item}>\n          <h3>\n            {item.Year} – {item.Title}\n          </h3>\n          <img width=\"180px\" alt={item.Title} src={item.Poster} />\n        </section>\n      ))}\n      {hasMore && <div ref={loaderRef}>Loading…</div>}\n    </div>\n  );\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React from 'react';\n\nimport Example from './Example';\n\nimport logo from './logo.svg';\n\nexport default function App() {\n  return (\n    <section>\n      <header>\n        <h1>\n          <img height=\"50px\" src={logo} alt=\"Close logo\" />\n        </h1>\n      </header>\n      <Example />\n    </section>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scroller\":\"Example_scroller__2OS4u\",\"item\":\"Example_item__1UE13\"};"],"sourceRoot":""}